/**
 * Default script for playground
 */
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sgReact = require('sg-react');

var _apemanReactBasic = require('apeman-react-basic');

var _co = require('co');

var _co2 = _interopRequireDefault(_co);

var _sugoTerminal = require('sugo-terminal');

var _sugoTerminal2 = _interopRequireDefault(_sugoTerminal);

var _asleep = require('asleep');

var _asleep2 = _interopRequireDefault(_asleep);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

require('babel-polyfill');

/**
 * Dynamic component create from the online-editor
 * @class Playground
 */
var Playground = _react2.default.createClass({
  displayName: 'Playground',

  // --------------------
  // Specs
  // --------------------

  getInitialState: function getInitialState() {
    var s = this;
    var spots = s.props.spots;

    return {
      /** Key of spot to connect */
      spotKey: spots.length > 0 ? spots[0].key : null,
      /** Date ping send */
      pingAt: null,
      /** Date pong received */
      pongAt: null
    };
  },
  render: function render() {
    var s = this;
    var state = s.state;
    var props = s.props;
    var spots = props.spots;
    var spotKey = state.spotKey;
    var pingAt = state.pingAt;
    var pongAt = state.pongAt;

    return _react2.default.createElement(
      'div',
      { className: 'dynamic-component' },
      _react2.default.createElement(
        _apemanReactBasic.ApSelectableArticle,
        {
          options: (spots || []).reduce(function (options, spot) {
            return Object.assign(options, _defineProperty({}, spot.key, spot.key));
          }, {}),
          name: 'spotKey',
          label: 'Spot: ',
          alt: 'No spot found! You need to connect one before playing',
          value: spotKey,
          onChange: function onChange(e) {
            return s.setState({ spotKey: e.target.value });
          }
        },
        _react2.default.createElement(
          _apemanReactBasic.ApSelectableArticle.Content,
          { contentFor: String(spotKey) },
          _react2.default.createElement(
            'div',
            { className: 'playground-row' },
            _react2.default.createElement(
              _apemanReactBasic.ApContainer,
              null,
              _react2.default.createElement(
                'div',
                { className: 'playground-item' },
                _react2.default.createElement(
                  'p',
                  null,
                  'Send a ping and receive pong.'
                )
              ),
              _react2.default.createElement(
                'div',
                { className: 'playground-item' },
                _react2.default.createElement(
                  _apemanReactBasic.ApBigButton,
                  {
                    onTap: function onTap() {
                      return s.withTerminal(regeneratorRuntime.mark(function sendPing(terminal) {
                        var spot, noop, pong;
                        return regeneratorRuntime.wrap(function sendPing$(_context) {
                          while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                if (!s.state.pongAt) {
                                  _context.next = 3;
                                  break;
                                }

                                // Reset to send ping
                                s.setState({ pingAt: null, pongAt: null });
                                return _context.abrupt('return');

                              case 3:
                                _context.next = 5;
                                return terminal.connect(spotKey);

                              case 5:
                                spot = _context.sent;
                                noop = spot.noop();

                                // Do ping-pong

                                console.log('Send ping to noop...');
                                s.setState({ pingAt: new Date().toLocaleTimeString() });
                                _context.next = 11;
                                return noop.ping();

                              case 11:
                                pong = _context.sent;

                                s.setState({ pongAt: new Date().toLocaleTimeString() });
                                console.log('...received ping from noop: "' + pong + '"');

                                // Tear down
                                _context.next = 16;
                                return spot.disconnect();

                              case 16:
                                _context.next = 18;
                                return (0, _asleep2.default)(10);

                              case 18:
                              case 'end':
                                return _context.stop();
                            }
                          }
                        }, sendPing, this);
                      }));
                    },
                    spinning: pingAt && !pongAt,
                    primary: !pingAt
                  },
                  pongAt ? 'Pong at ' + pongAt : pingAt ? 'Waiting...' : 'Send ping',
                  ' '
                )
              )
            )
          )
        )
      )
    );
  },


  // --------------------
  // LifeCycle
  // --------------------

  componentDidMount: function componentDidMount() {
    var s = this;
    var _window$location = window.location;
    var protocol = _window$location.protocol;
    var host = _window$location.host;

    s.terminal = (0, _sugoTerminal2.default)(protocol + '//' + host + '/terminals');
  },


  // --------------------
  // custom
  // --------------------

  withTerminal: function withTerminal(handler) {
    var s = this;
    var terminal = s.terminal;

    if (!terminal) {
      return;
    }
    (0, _co2.default)(handler, terminal).catch(function (err) {
      return console.error(err);
    });
  }
});

// Mount react component
setTimeout(function () {
  var mountRoot = document.getElementById('playground-root');
  (0, _sgReact.mount)(mountRoot, Playground, {
    spots: [].concat(window.spots || [])
  }).then(function () {
    console.debug('Playground mounted');
  }).catch(function (err) {
    return console.error(err);
  });
}, 600);
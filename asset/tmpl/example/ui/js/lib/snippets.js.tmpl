
/**
 * !! This is an auto-generated file and do not edit manually !! 
 * Snippet contents
 * @namespace Snippets
 */
'use strict';

/** Converted from "[object Object]" */

exports.DEFAULT_HTML = '<!--\n Default HTML for playground\n-->\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset="UTF-8">\n  <link rel="stylesheet" href="css/theme.css">\n  <link rel="stylesheet" href="css/playground.css">\n  <link rel="stylesheet" href="css/font-awesome.css"/>\n  <link rel="stylesheet" href="css/ionicons.css"/>\n  <script src="js/external.cc.js"></script>\n  <meta name="viewport" content="width=device-width, initial-scale=1">\n</head>\n<body class="playground-body">\n<div id="playground-root">\n  <h3 class="playground-message">Loading dynamic contents...</h3>\n</div>\n</body>\n</html>\n';

/** Converted from "[object Object]" */
exports.DEFAULT_SCRIPT = '/**\n * Default script for playground\n */\n\'use strict\'\n\nrequire(\'babel-polyfill\')\n\nimport React, {PropTypes as types} from \'react\'\nimport {mount} from \'sg-react\'\nimport {\n  ApContainer,\n  ApBigButton,\n  ApSelectableArticle\n} from \'apeman-react-basic\'\nimport co from \'co\'\nimport sugoCaller from \'sugo-caller\'\nimport asleep from \'asleep\'\n\n/**\n * Dynamic component create from the online-editor\n * @class Playground\n */\nconst Playground = React.createClass({\n  // --------------------\n  // Specs\n  // --------------------\n\n  getInitialState () {\n    const s = this\n    let { actors } = s.props\n    return {\n      /** Key of actor to connect */\n      actorKey: actors.length > 0 ? actors[ 0 ].key : null,\n      /** Date ping send */\n      pingAt: null,\n      /** Date pong received */\n      pongAt: null\n    }\n  },\n\n  render () {\n    const s = this\n    let { state, props } = s\n    let { actors } = props\n    let { actorKey, pingAt, pongAt } = state\n    return (\n      <div className=\'dynamic-component\'>\n        <ApSelectableArticle\n          options={ (actors || []).reduce((options, actor) => Object.assign(options, {[actor.key]: actor.key}), {}) }\n          name=\'actorKey\'\n          label=\'Spot: \'\n          alt=\'No actor found! You need to connect one before playing\'\n          value={ actorKey }\n          onChange={ (e) => s.setState({ actorKey: e.target.value }) }\n        >\n          <ApSelectableArticle.Content contentFor={ String(actorKey) }>\n            <div className=\'playground-row\'>\n              <ApContainer>\n                <div className=\'playground-item\'>\n                  <p>Send a ping and receive pong.</p>\n                </div>\n                <div className=\'playground-item\'>\n                  <ApBigButton\n                    onTap={ () => s.withTerminal(function * sendPing (caller) {\n                      if (s.state.pongAt) {\n                        // Reset to send ping\n                        s.setState({pingAt: null, pongAt: null})\n                        return\n                      }\n\n                      // Set up\n                      let actor = yield caller.connect(actorKey)\n                      let noop = actor.get(\'noop\')\n\n                      // Do ping-pong\n                      console.log(\'Send ping to noop...\')\n                      s.setState({pingAt: new Date().toLocaleTimeString()})\n                      let pong = yield noop.ping()\n                      s.setState({pongAt: new Date().toLocaleTimeString()})\n                      console.log(' + '`' + '...received ping from noop: "' + '${' + 'pong' + '}' + '"' + '`' + ')\n\n                      // Tear down\n                      yield actor.disconnect()\n                      yield asleep(10)\n                  }) }\n                    spinning={ pingAt && !pongAt }\n                    primary={ !pingAt }\n                  >{ pongAt ? ' + '`' + 'Pong at ' + '${' + 'pongAt' + '}' + '`' + ' : (pingAt ? \'Waiting...\' : \'Send ping\')} </ApBigButton>\n                </div>\n              </ApContainer>\n            </div>\n          </ApSelectableArticle.Content>\n        </ApSelectableArticle>\n      </div>\n    )\n  },\n\n  // --------------------\n  // LifeCycle\n  // --------------------\n\n  componentDidMount () {\n    const s = this\n    let { protocol, host } = window.location\n    s.caller = sugoCaller(' + '`' + '${' + 'protocol' + '}' + '//' + '${' + 'host' + '}' + '/callers' + '`' + ')\n  },\n\n  // --------------------\n  // custom\n  // --------------------\n\n  withTerminal (handler) {\n    const s = this\n    let { caller } = s\n    if (!caller) {\n      return\n    }\n    co(handler, caller).catch((err) => console.error(err))\n  }\n})\n\n// Mount react component\nsetTimeout(() => {\n  let mountRoot = document.getElementById(\'playground-root\')\n  mount(mountRoot, Playground, {\n    actors: [].concat(window.actors || [])\n  }).then(() => {\n    console.debug(\'Playground mounted\')\n  }).catch((err) => console.error(err))\n}, 600)\n';
//# sourceMappingURL=data:application/json;base64,bnVsbA==
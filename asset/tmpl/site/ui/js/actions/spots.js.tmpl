/**
 * Action of spots.
 */
import co from 'co'
import equal from 'deep-equal'
import cloudAgent from 'sugo-cloud/lib/agent'
import sugoTerminal from 'sugo-terminal'

const debug = require('debug')('sg:site:actions:spots')
const host = window.location.host
const protocol = window.location.protocol
const CLOUD_URL = `${protocol}//${host}`
const TERMINAL_URL = `${CLOUD_URL}/terminals`

const getSpotsByAgent = () => {
  return co(function * () {
    let spots = yield cloudAgent(CLOUD_URL).spots()
    debug('spots through cloudAgent')
    debug(spots)
    return spots
  }).catch(err => {
    debug('cannot get spots through cloudAgent')
    console.error(err)
    return []
  })
}

const openTerminal = (key) => {
  return co(function * () {
    let Terminal = sugoTerminal(TERMINAL_URL, {})
    let terminal = yield Terminal.connect(key)
    return terminal
  }).catch(err => Promise.reject(err))
}

function getNewSpotKeys (oldKeys, newKeys) {
  let oldDict = dictByKey(oldKeys.map(key => ({ key })))
  let added = newKeys.filter(key => !oldDict[key])
  return added
}

function dictByKey (array) {
  return array.reduce((dict, obj) => Object.assign(dict, {[obj.key]: obj}), {})
}

// ---- export modules ----

const connectSpots = () => {
  return (dispatch, getState) => {
    return co(function * () {
      debug('connectSpots starts')
      let spotsInStore = getState().spots
      let spotsByAgent = yield getSpotsByAgent()

      let keysInStore = spotsInStore.map(spot => spot.key)
      let keysByAgent = spotsByAgent.map(spot => spot.key)
      let noChange = equal(keysInStore, keysByAgent)
      if (noChange) {
        debug('Refreshed, but no change.')
        return
      }
      let newKeys = getNewSpotKeys(keysInStore, keysByAgent)
      let newSpots = yield newKeys.map(key => {
        return co(function * () {
          let terminal = yield openTerminal(key)
          return {
            key,
            terminal,
            requesting: false
          }
        }).catch(err => Promise.reject(err))
      })
      let concatSpots = Object.assign(
        dictByKey(spotsInStore),
        dictByKey(newSpots)
      )

      // 接続されていないスポットはここで掃除される
      let spots = keysByAgent.map(key => concatSpots[key])
      debug('dispatch CONNECT_SPOTS')
      debug(spots)
      dispatch({
        type: 'CONNECT_SPOTS',
        spots
      })
    }).catch(err => {
      console.error(err)
      return Promise.reject(err)
    })
  }
}

const toggleRequesting = (spotKey) => {
  return {
    type: 'TOGGLE_REQUESTING',
    spotKey
  }
}

export default {
  connectSpots,
  toggleRequesting
}

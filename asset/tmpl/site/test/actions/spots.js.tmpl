import {equal} from 'assert'
import sugoCloud from 'sugo-cloud'
import sugoActor from 'sugo-actor'
import 'babel-polyfill'
import co from 'co'
import actors from '../../ui/js/actions/actors'
import env from '../../env'
import noopModule from 'sugo-module-noop'

const {connectActors} = actors

const PORT = env.port.CLOUD
const CLOUD_URL = `http://localhost:${PORT}`
const ACTOR_URL = `${CLOUD_URL}/actors`

describe('action actors', () => {
  before(() => {
    return co(function * () {
      yield sugoCloud({
        port: PORT
      })
      let actor = sugoActor(ACTOR_URL, {
        key: 'actor-01',
        modules: {
          noop: noopModule({})
        }
      })
      yield actor.connect()
    }).catch(err => Promise.reject(err))
  })

  after((done) => {
    done()
  })

  it('connectActors で一つのアクターに接続できる', () => {
    return co(function * () {
      let dispatch = ({actors}) => {
        let {key} = actors[0]
        equal(key, 'actor-01')
      }
      let getState = () => ({actors: []})
      yield connectActors()(dispatch, getState)
    }).catch(err => {
      return Promise.reject(err)
    })
  })
})

/* global describe it before after*/
